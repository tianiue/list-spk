name: Build OpenList Synology Package

# 仅支持手动触发
on:
  workflow_dispatch:
    inputs:
      releaseVersion:
        description: '版本号 (例如: 1.0.0)'
        required: true
        default: '1.0.0'
      isPreRelease:
        description: '是否为预发布版本'
        required: true
        type: boolean
        default: false

# 显式声明最小权限
permissions:
  contents: write
  actions: read

jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        # 支持的群晖架构
        arch: [x86_64, armv7, armv8]
    
    steps:
      - name: Checkout 代码
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          
      - name: 设置Python版本
        uses: actions/setup-python@v5
        with:
          python-version: '3.9'  # 与群晖兼容的稳定版本
          
      - name: 设置版本号
        id: version
        run: |
          # 仅使用手动输入的版本号
          echo "VERSION=${{ github.event.inputs.releaseVersion }}" >> $GITHUB_OUTPUT
          
      - name: 缓存系统依赖
        uses: actions/cache@v4
        with:
          path: /var/cache/apt
          key: ${{ runner.os }}-apt-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-apt-
            
      - name: 缓存Python依赖
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-
            
      - name: 安装构建依赖
        run: |
          sudo apt-get update
          sudo apt-get install -y libarchive-tools python3 python3-pip
          pip3 install --upgrade pip
          pip3 install -r requirements.txt
          
      - name: 准备构建环境
        run: |
          # 创建构建目录
          mkdir -p build/target
          
          # 复制源代码和配置文件
          cp -r src/* build/target/
          cp -r package/* build/
          
          # 根据架构修改INFO文件
          sed -i "s|{ARCH}|${{ matrix.arch }}|g" build/INFO
          sed -i "s|{VERSION}|${{ steps.version.outputs.VERSION }}|g" build/INFO

      - name: 设置文件权限（群晖格式校验核心）
        run: |
          cd build
          # 执行脚本必须设置755权限（仅对存在的文件操作）
          [ -f "start-stop-status" ] && chmod 755 start-stop-status
          [ -f "postinst" ] && chmod 755 postinst
          [ -f "prerm" ] && chmod 755 prerm
          
          # 配置文件设置644权限（检查文件是否存在）
          [ -f "INFO" ] && chmod 644 INFO
          
          # 图标文件权限（容错处理）
          if [ -d "icons" ]; then
            # 只对文件设置权限，避免目录本身
            find icons -type f -exec chmod 644 {} +
          fi
          
          # 源码文件权限（检查目录是否存在）
          if [ -d "target" ]; then
            find target -type f -exec chmod 644 {} +
          fi
          
      - name: 构建SPK包
        run: |
          cd build
          # 群晖SPK要求使用特定格式的tar包
          tar --format=gnu --owner=0 --group=0 -cvf ../openlist-synology-${{ steps.version.outputs.VERSION }}-${{ matrix.arch }}.spk *
          
      - name: 增强SPK包验证
        run: |
          # 验证关键文件是否存在
          required_files=("start-stop-status" "INFO")
          spk_file="openlist-synology-${{ steps.version.outputs.VERSION }}-${{ matrix.arch }}.spk"
          
          for file in "${required_files[@]}"; do
            if ! tar -tf "$spk_file" | grep -q "$file"; then
              echo "错误：SPK包缺少必要文件: $file"
              exit 1
            fi
          done
          
          # 验证权限是否正确（通过tar查看文件权限）
          if ! tar -tvf "$spk_file" | awk '$1 ~ /^-rwxr-xr-x/ && /start-stop-status/'; then
            echo "错误：start-stop-status权限不正确（需755）"
            exit 1
          fi
          
          if ! tar -tvf "$spk_file" | awk '$1 ~ /^-rw-r--r--/ && /INFO/'; then
            echo "错误：INFO文件权限不正确（需644）"
            exit 1
          fi
          
      - name: 上传构建产物
        uses: actions/upload-artifact@v4
        with:
          name: openlist-synology-${{ steps.version.outputs.VERSION }}-${{ matrix.arch }}
          path: openlist-synology-${{ steps.version.outputs.VERSION }}-${{ matrix.arch }}.spk

  release:
    needs: build
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout 代码
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          
      - name: 下载所有构建产物
        uses: actions/download-artifact@v4
        with:
          path: artifacts
          
      - name: 设置版本号
        id: version
        run: |
          # 仅使用手动输入的版本号
          echo "VERSION=${{ github.event.inputs.releaseVersion }}" >> $GITHUB_OUTPUT
          echo "TAG=v${{ github.event.inputs.releaseVersion }}" >> $GITHUB_OUTPUT
          
      - name: 整理发布文件
        run: |
          mkdir -p release
          find artifacts -name "*.spk" -exec cp {} release/ \;
          
      - name: 生成发布说明
        run: |
          echo "## OpenList 群晖客户端 ${{ steps.version.outputs.VERSION }}" > RELEASE_NOTES.md
          echo "" >> RELEASE_NOTES.md
          echo "### 本次更新内容" >> RELEASE_NOTES.md
          echo "- 自动构建版本，包含全架构支持" >> RELEASE_NOTES.md
          echo "- 优化权限配置和打包流程" >> RELEASE_NOTES.md
          echo "" >> RELEASE_NOTES.md
          echo "### 支持的架构" >> RELEASE_NOTES.md
          echo "- x86_64" >> RELEASE_NOTES.md
          echo "- armv7" >> RELEASE_NOTES.md
          echo "- armv8" >> RELEASE_NOTES.md
          
      - name: 处理标签冲突并推送
        run: |
          git config --global user.name "GitHub Actions"
          git config --global user.email "actions@github.com"
          # 若标签已存在则删除
          if git rev-parse ${{ steps.version.outputs.TAG }} >/dev/null 2>&1; then
            git tag -d ${{ steps.version.outputs.TAG }}
            git push origin --delete ${{ steps.version.outputs.TAG }}
          fi
          git tag ${{ steps.version.outputs.TAG }}
          git push origin ${{ steps.version.outputs.TAG }}
          
      - name: 创建GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ steps.version.outputs.TAG }}
          name: OpenList 群晖客户端 v${{ steps.version.outputs.VERSION }}
          body_path: RELEASE_NOTES.md
          files: release/*.spk
          draft: false
          prerelease: ${{ github.event.inputs.isPreRelease }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

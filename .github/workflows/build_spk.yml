name: Build OpenList Synology Package

on:
  workflow_dispatch:
    inputs:
      releaseVersion:
        description: '版本号 (例如: 1.0.0)'
        required: true
        default: '1.0.0'
      isPreRelease:
        description: '是否为预发布版本'
        required: true
        type: boolean
        default: false

permissions:
  contents: write
  actions: read

jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        arch: [x86_64, armv7, armv8]
    
    steps:
      - name: Checkout 代码
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          
      - name: 设置版本号
        id: version
        run: |
          echo "VERSION=${{ github.event.inputs.releaseVersion }}" >> $GITHUB_OUTPUT
          
      - name: 缓存依赖
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-
            
      - name: 安装构建依赖
        run: |
          sudo apt-get update
          sudo apt-get install -y libarchive-tools python3 python3-pip
          pip3 install --upgrade pip
          pip3 install -r requirements.txt
          
      - name: 准备构建环境
        run: |
          mkdir -p build/target
          # 复制源代码和配置文件（添加容错：如果目录为空也不报错）
          cp -r src/* build/target/ || true
          cp -r package/* build/ || true
          
          # 验证关键文件是否存在（提前发现缺失）
          if [ ! -f "build/INFO" ]; then
            echo "错误：package目录下缺少必要的INFO文件"
            exit 1
          fi
          if [ ! -f "build/start-stop-status" ]; then
            echo "警告：package目录下未找到start-stop-status脚本（可能影响运行）"
          fi
          
          # 修改INFO文件
          sed -i "s|{ARCH}|${{ matrix.arch }}|g" build/INFO
          sed -i "s|{VERSION}|${{ steps.version.outputs.VERSION }}|g" build/INFO

      - name: 设置文件权限
        run: |
          cd build
          [ -f "start-stop-status" ] && chmod 755 start-stop-status
          [ -f "postinst" ] && chmod 755 postinst
          [ -f "prerm" ] && chmod 755 prerm
          [ -f "INFO" ] && chmod 644 INFO
          if [ -d "icons" ]; then
            find icons -type f -exec chmod 644 {} +
          fi
          if [ -d "target" ]; then
            find target -type f -exec chmod 644 {} +
          fi
          
      - name: 调试：检查build目录内容
        run: |
          echo "===== build目录结构 ====="
          ls -la build/
          echo "========================="
          # 确保目录非空
          if [ -z "$(ls -A build/)" ]; then
            echo "错误：build目录为空，无法打包"
            exit 1
          fi
          
      - name: 构建SPK包（优化容错）
        run: |
          cd build
          # 添加--ignore-failed-read忽略读取失败的文件，避免单个文件问题导致整体失败
          tar --format=gnu --owner=0 --group=0 --ignore-failed-read -cvf ../openlist-synology-${{ steps.version.outputs.VERSION }}-${{ matrix.arch }}.spk ./*
          
      - name: 验证SPK包
        run: |
          if ! tar -tf openlist-synology-${{ steps.version.outputs.VERSION }}-${{ matrix.arch }}.spk | grep -q "INFO"; then
            echo "SPK包不包含必要的INFO文件"
            exit 1
          fi
          
      - name: 上传构建产物
        uses: actions/upload-artifact@v4
        with:
          name: openlist-synology-${{ steps.version.outputs.VERSION }}-${{ matrix.arch }}
          path: openlist-synology-${{ steps.version.outputs.VERSION }}-${{ matrix.arch }}.spk

  release:
    needs: build
    runs-on: ubuntu-latest
    # 剩余步骤与原脚本一致...
    steps:
      - name: Checkout 代码
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          
      - name: 下载所有构建产物
        uses: actions/download-artifact@v4
        with:
          path: artifacts
          
      - name: 设置版本号
        id: version
        run: |
          echo "VERSION=${{ github.event.inputs.releaseVersion }}" >> $GITHUB_OUTPUT
          echo "TAG=v${{ github.event.inputs.releaseVersion }}" >> $GITHUB_OUTPUT
          
      - name: 整理发布文件
        run: |
          mkdir -p release
          find artifacts -name "*.spk" -exec cp {} release/ \;
          
      - name: 生成发布说明
        run: |
          echo "## OpenList 群晖客户端 ${{ steps.version.outputs.VERSION }}" > RELEASE_NOTES.md
          echo "" >> RELEASE_NOTES.md
          echo "### 本次更新内容" >> RELEASE_NOTES.md
          echo "- 修复SPK打包失败问题" >> RELEASE_NOTES.md
          echo "- 增强构建过程的容错性和调试能力" >> RELEASE_NOTES.md
          echo "" >> RELEASE_NOTES.md
          echo "### 支持的架构" >> RELEASE_NOTES.md
          echo "- x86_64" >> RELEASE_NOTES.md
          echo "- armv7" >> RELEASE_NOTES.md
          echo "- armv8" >> RELEASE_NOTES.md
          
      - name: 处理标签冲突并推送
        run: |
          git config --global user.name "GitHub Actions"
          git config --global user.email "actions@github.com"
          if git rev-parse ${{ steps.version.outputs.TAG }} >/dev/null 2>&1; then
            git tag -d ${{ steps.version.outputs.TAG }}
            git push origin --delete ${{ steps.version.outputs.TAG }}
          fi
          git tag ${{ steps.version.outputs.TAG }}
          git push origin ${{ steps.version.outputs.TAG }}
          
      - name: 创建GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ steps.version.outputs.TAG }}
          name: OpenList 群晖客户端 v${{ steps.version.outputs.VERSION }}
          body_path: RELEASE_NOTES.md
          files: release/*.spk
          draft: false
          prerelease: ${{ github.event.inputs.isPreRelease }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

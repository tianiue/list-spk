name: Build OpenList Synology Package

on:
  workflow_dispatch:
    inputs:
      releaseVersion:
        description: '版本号 (例如: 1.0.0)'
        required: true
        default: '1.0.0'
      isPreRelease:
        description: '是否为预发布版本'
        required: true
        type: boolean
        default: false

permissions:
  contents: write
  actions: read

jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        arch: [x86_64, armv7, armv8]
    
    steps:
      - name: Checkout 代码
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          
      - name: 设置版本号
        id: version
        run: |
          echo "VERSION=${{ github.event.inputs.releaseVersion }}" >> $GITHUB_OUTPUT
          echo "TAG=v${{ github.event.inputs.releaseVersion }}" >> $GITHUB_OUTPUT
          
      - name: 安装构建依赖（含格式处理工具）
        run: |
          sudo apt-get update
          sudo apt-get install -y libarchive-tools python3 python3-pip dos2unix  # 新增dos2unix处理换行符
          pip3 install --upgrade pip
          # 容错处理：若requirements.txt不存在则跳过
          if [ -f "requirements.txt" ]; then
            pip3 install -r requirements.txt
          else
            echo "requirements.txt不存在，跳过依赖安装"
          fi
          
      - name: 准备构建环境
        run: |
          # 创建构建目录
          mkdir -p build/target
          
          # 复制源代码和配置文件
          cp -r src/* build/target/
          cp -r package/* build/
          
          # 验证关键脚本是否存在（群晖强制要求）
          echo "=== 验证必要文件 ==="
          if [ ! -f "build/INFO" ]; then
            echo "错误：缺少核心文件INFO"
            exit 1
          fi
          if [ ! -f "build/start-stop-status" ]; then
            echo "错误：缺少服务控制脚本start-stop-status"
            exit 1
          fi
          if [ ! -f "build/postinst" ]; then
            echo "错误：缺少安装后脚本postinst"
            exit 1
          fi
          if [ ! -f "build/prerm" ]; then
            echo "错误：缺少卸载前脚本prerm"
            exit 1
          fi
          
          # 替换INFO中的架构和版本
          sed -i "s|{ARCH}|${{ matrix.arch }}|g" build/INFO
          sed -i "s|{VERSION}|${{ steps.version.outputs.VERSION }}|g" build/INFO
          
          # 转换脚本文件为Unix换行符（LF），解决格式问题
          echo "=== 转换换行符 ==="
          dos2unix build/start-stop-status build/postinst build/prerm build/INFO
          
      - name: 设置文件权限（群晖格式校验核心）
        run: |
          cd build
          # 执行脚本必须设置755权限
          chmod 755 start-stop-status postinst prerm
          # 配置文件设置644权限
          chmod 644 INFO
          # 图标文件权限（容错：若icons目录不存在则跳过）
          if [ -d "icons" ]; then
            chmod 644 icons/*
          fi
          # 源码文件权限
          chmod 644 target/*
          
      - name: 构建SPK包（符合群晖7.2.2格式规范）
        run: |
          cd build
          # 使用群晖要求的tar参数：GNU格式+数字用户组+无顶层目录
          tar --format=gnu --owner=0 --group=0 --numeric-owner -cvf ../openlist-synology-${{ steps.version.outputs.VERSION }}-${{ matrix.arch }}.spk ./*
          
      - name: 验证SPK包完整性
        run: |
          SPK_FILE="openlist-synology-${{ steps.version.outputs.VERSION }}-${{ matrix.arch }}.spk"
          echo "=== 验证SPK内容 ==="
          # 检查关键文件是否存在
          if ! tar -tf $SPK_FILE | grep -q "INFO"; then
            echo "错误：SPK包缺少INFO文件"
            exit 1
          fi
          if ! tar -tf $SPK_FILE | grep -q "start-stop-status"; then
            echo "错误：SPK包缺少服务脚本"
            exit 1
          fi
          # 提取文件验证权限
          mkdir -p temp_spk
          tar -xf $SPK_FILE -C temp_spk
          if [ $(stat -c "%a" temp_spk/start-stop-status) -ne 755 ]; then
            echo "错误：服务脚本权限不正确（需755）"
            exit 1
          fi
          
      - name: 上传构建产物
        uses: actions/upload-artifact@v4
        with:
          name: openlist-synology-${{ steps.version.outputs.VERSION }}-${{ matrix.arch }}
          path: openlist-synology-${{ steps.version.outputs.VERSION }}-${{ matrix.arch }}.spk

  release:
    needs: build
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout 代码
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          
      - name: 下载所有构建产物
        uses: actions/download-artifact@v4
        with:
          path: artifacts
          
      - name: 设置版本号
        id: version
        run: |
          echo "VERSION=${{ github.event.inputs.releaseVersion }}" >> $GITHUB_OUTPUT
          echo "TAG=v${{ github.event.inputs.releaseVersion }}" >> $GITHUB_OUTPUT
          
      - name: 检查标签是否已存在
        id: check-tag
        run: |
          if git rev-parse "${{ steps.version.outputs.TAG }}" >/dev/null 2>&1; then
            echo "TAG_EXISTS=true" >> $GITHUB_OUTPUT
          else
            echo "TAG_EXISTS=false" >> $GITHUB_OUTPUT
          fi
          
      - name: 整理发布文件
        run: |
          mkdir -p release
          find artifacts -name "*.spk" -exec cp {} release/ \;
          
      - name: 生成发布说明
        run: |
          echo "## OpenList 群晖客户端 ${{ steps.version.outputs.VERSION }}" > RELEASE_NOTES.md
          echo "" >> RELEASE_NOTES.md
          echo "### 本次更新内容" >> RELEASE_NOTES.md
          echo "- 修复群晖7.2.2及以上系统的格式兼容问题" >> RELEASE_NOTES.md
          echo "- 优化SPK打包规范，确保符合群晖格式校验要求" >> RELEASE_NOTES.md
          echo "" >> RELEASE_NOTES.md
          echo "### 支持的架构" >> RELEASE_NOTES.md
          echo "- x86_64" >> RELEASE_NOTES.md
          echo "- armv7" >> RELEASE_NOTES.md
          echo "- armv8" >> RELEASE_NOTES.md
          
      - name: 创建并推送Git标签
        if: steps.check-tag.outputs.TAG_EXISTS == 'false'
        run: |
          git config --global user.name "GitHub Actions"
          git config --global user.email "actions@github.com"
          git tag ${{ steps.version.outputs.TAG }}
          git push origin ${{ steps.version.outputs.TAG }}
          
      - name: 创建GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ steps.version.outputs.TAG }}
          name: OpenList 群晖客户端 v${{ steps.version.outputs.VERSION }}
          body_path: RELEASE_NOTES.md
          files: release/*.spk
          draft: false
          prerelease: ${{ github.event.inputs.isPreRelease }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
